import algorithms.cma
import misc.utility
import solutions.torch_solutions
import tasks.gym_task
import opponents.policy_api


# CMA configurations
cma.CMA.population_size = 32
cma.CMA.init_sigma = 0.1

cma.CMAMaster.seed = 0
cma.CMAMaster.n_repeat = 16
cma.CMAMaster.max_iter = 2000
cma.CMAMaster.eval_every_n_iter = 10
cma.CMAMaster.n_eval_roll_outs = 100

utility.get_es_master.es_algorithm = @cma.CMAMaster
utility.get_es_worker.es_algorithm = @cma.CMAWorker


# Solution configurations
torch_solutions.VisionTaskSolution.image_size = 86
torch_solutions.VisionTaskSolution.query_dim = 4
torch_solutions.VisionTaskSolution.output_dim = 2
torch_solutions.VisionTaskSolution.output_activation = "tanh"
torch_solutions.VisionTaskSolution.num_hiddens = [16,]
torch_solutions.VisionTaskSolution.l2_coefficient = 0
torch_solutions.VisionTaskSolution.patch_size = 7
torch_solutions.VisionTaskSolution.patch_stride = 4
torch_solutions.VisionTaskSolution.top_k = 10
torch_solutions.VisionTaskSolution.data_dim = 1
torch_solutions.VisionTaskSolution.activation = "tanh"
torch_solutions.VisionTaskSolution.normalize_positions = True
torch_solutions.VisionTaskSolution.use_lstm_controller = True
utility.create_solution.solution_loader = @torch_solutions.VisionTaskSolution()


# Task configurations
utility.create_task.out_of_track_cap = 20
utility.create_task.max_steps = 1000
utility.create_task.task_loader = @gym_task.CarRacingTask()

gym_task.CarRacingTask.crop = False
gym_task.CarRacingTask.grass_penalty = 1
gym_task.CarRacingTask.action_repeat = 1
gym_task.CarRacingTask.opponent = @policy_api.PPOPolicyAPI()

policy_api.PPOPolicyAPI.log_dir = "opponents/data/alphacar/"
policy_api.PPOPolicyAPI.suffix = "alphacar"
